/**
*Generated by StarUML(tm) Java Add-In
*  @ Project : basis
*  @ File Name : EmployeeServiceImpl.java
*  @ Date : 2012/9/21
*  @ Author : wxliu
*/



package com.basis.core.service.impl;

import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.basis.core.common.Page;
import com.basis.core.common.Result;
import com.basis.core.condition.EmployeeCondition;
import com.basis.core.constants.EEmployeeState;
import com.basis.core.dao.IBaseDao;
import com.basis.core.domain.Employee;
import com.basis.core.exception.BasisException;
import com.basis.core.exception.NameIsExistException;
import com.basis.core.exception.ParamIsNullException;
import com.basis.core.util.BasisUtil;


public class EmployeeServiceImpl implements com.basis.core.service.IEmployeeService {
	private final static Logger logger=Logger.getLogger(EmployeeServiceImpl.class);
	private IBaseDao dao;
	
	
	public void setDao(IBaseDao dao) {
		this.dao = dao;
	}

	public Result<String> addEmployee(Employee employee) {
		/*
		 * 1.判断参数不能为空
		 * 2.判断密码是否一致
		 * 3.判断名称是否存在
		 * 4.新增
		 * 5.返回结果
		 */
		Result<String> result=new Result<String>(true);
		try{
			//判断参数不能为空
			BasisUtil.validParamsNotNull(employee.getRoleId(),employee.getName());
//			//判断密码是否一致
//			if(employee.getPassword() != null && !employee.getPassword().equals(employee.getRepassword())){
//				throw new BasisException("employee.password.diffrent", "两次输入的密码不一致");
//			}
			//默认密码
			if(employee.getPassword() == null || "".equals(employee.getPassword())){
				employee.setPassword(employee.INITPASSWORD);
			}
			//判断名称是否有重复的
			dao.validHasSameName(Employee.class, employee.getName(), "where state<>0");
			//新增
			int nextsort=dao.getNextSort(Employee.class, "where state<>0");
			employee.setSort(nextsort);
			employee.setCreateTime(new Date());
			employee.setPassword(BasisUtil.getMD5(employee.getPassword()));//md5加密
			if(employee.getState()==null){
				employee.setState(EEmployeeState.NORMAL.getCode());
			}
			
			String employeeId=dao.addObject(employee);
			result.setData(employeeId);
		}catch (ParamIsNullException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}catch (NameIsExistException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}
//		catch (BasisException e) {
//			logger.warn(e.getMessage());
//			result.setSuccess(false);
//			result.setCode(e.getCode());
//		}
		return result;
	}

	public Result<Object> modifyEmployee(Employee employee) {
		/*
		 * 1.判断参数不能为空
		 * 2.判断用户名重复
		 * 3.修改
		 * 4.返回结果
		 */
		Result<Object> result=new Result<Object>(true);
		try{
			//判断参数不能为空
			BasisUtil.validParamsNotNull(employee.getId(),employee.getRoleId(),employee.getName());
			
			//判断名称是否有重复的
			dao.validHasSameName(Employee.class, employee.getName(), "where state<>0 and id<>'"+employee.getId()+"'");
			//修改
			Employee dbEmployee=dao.getObject(Employee.class, employee.getId());
			updateEmployee(employee, dbEmployee);
			
		}catch (ParamIsNullException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}catch (NameIsExistException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}
		return result;
	}

	public Result<Object> removeEmployee(Employee employee) {
		return updateState(employee,EEmployeeState.DELETE);
	}

	public Result<Object> modifyResetPassword(Employee employee,
			String nowpassword) {
		/*
		 * 1.判断参数不能为空
		 * 验证当前密码是否正确
		 * 2.修改
		 * 3.返回结果
		 */
		Result<Object> result=new Result<Object>(true);
		try{
			//判断参数不能为空
			BasisUtil.validParamsNotNull(employee.getId(),employee.getPassword(),employee.getRepassword(),nowpassword);
			Employee dbEmployee=dao.getObject(Employee.class, employee.getId());
			
			//判断密码是否正确
			if(!employee.getPassword().equals(employee.getRepassword())){
				throw new BasisException("employee.password.diffrent", "两次输入的密码不一致");
			}
			if(!dbEmployee.getPassword().equals(BasisUtil.getMD5(nowpassword))){
				throw new BasisException("employee.nowpassword.notright", "现在的密码输入不正确");
			}
			//修改
			if(StringUtils.isNotBlank(employee.getModifyerId())){
				dbEmployee.setModifyerId(employee.getModifyerId());
				dbEmployee.setModifyTime(new Date());
			}
			dbEmployee.setPassword(BasisUtil.getMD5(employee.getPassword()));
		}catch (ParamIsNullException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}catch (BasisException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}
		return result;
	}
	
	
	public Result<Object> modifyInitPassword(Employee employee) {
		/*
		 * 1.判断参数不能为空
		 * 2.修改
		 * 3.返回结果
		 */
		Result<Object> result=new Result<Object>(true);
		try{
			//判断参数不能为空
			BasisUtil.validParamsNotNull(employee.getId());
			
			//修改
			Employee dbEmployee=dao.getObject(Employee.class, employee.getId());
			if(StringUtils.isNotBlank(employee.getModifyerId())){
				dbEmployee.setModifyerId(employee.getModifyerId());
				dbEmployee.setModifyTime(new Date());
			}
			dbEmployee.setPassword(BasisUtil.getMD5(Employee.INITPASSWORD));
		}catch (ParamIsNullException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}
		return result;
	}

	public Result<Object> modifyLockEmployee(Employee employee) {
		return updateState(employee,EEmployeeState.LOCK);
	}
	public Result<Object> modifyUnlockEmployee(Employee employee) {
		return updateState(employee, EEmployeeState.NORMAL);
	}
	public Employee queryEmployeeById(String id) {
		return dao.getObject(Employee.class, id);
	}

	public Page<Employee> queryEmployeePage(EmployeeCondition condition) {
		return dao.queryPage(condition);
	}
	private Result<Object> updateState(Employee employee,EEmployeeState state){
		/*
		 * 1.判断参数不能为空
		 * 2.冻结
		 * 3.返回结果
		 */
		Result<Object> result=new Result<Object>(true);
		try{
			//判断参数不能为空 id
			BasisUtil.validParamsNotNull(employee.getId());
			//删除
			Employee dbEmployee=dao.getObject(Employee.class, employee.getId());
			dbEmployee.setModifyerId(employee.getModifyerId());
			dbEmployee.setModifyTime(new Date());
			dbEmployee.setState(state.getCode());
			
		}catch (ParamIsNullException e) {
			logger.warn(e.getMessage());
			result.setSuccess(false);
			result.setCode(e.getCode());
		}
		return result;
	}
	/**
	 * 更新修改信息到数据库中
	 * @param employee
	 * @param dbEmployee
	 */
	private void updateEmployee(Employee employee,Employee dbEmployee){
		if(StringUtils.isNotBlank(employee.getName())){
			dbEmployee.setName(employee.getName());
		}
		if(StringUtils.isNotBlank(employee.getModifyerId())){
			dbEmployee.setModifyerId(employee.getModifyerId());
			dbEmployee.setModifyTime(new Date());
		}
		if(StringUtils.isNotBlank(employee.getRoleId())){
			dbEmployee.setRoleId(employee.getRoleId());
		}
		if(employee.getState()!=null){
			dbEmployee.setState(employee.getState());
		}
		if(StringUtils.isNotBlank(employee.getLinkman())){
			dbEmployee.setLinkman(employee.getLinkman());
		}
		if(StringUtils.isNotBlank(employee.getTel())){
			dbEmployee.setTel(employee.getTel());
		}
		if(StringUtils.isNotBlank(employee.getPhone())){
			dbEmployee.setPhone(employee.getPhone());
		}
		if(StringUtils.isNotBlank(employee.getEmail())){
			dbEmployee.setEmail(employee.getEmail());
		}
		if(StringUtils.isNotBlank(employee.getFax())){
			dbEmployee.setFax(employee.getFax());
		}
		
	}

}
