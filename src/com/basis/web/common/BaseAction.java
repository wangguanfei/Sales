package com.basis.web.common;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.fckeditor.response.GetResponse;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.basis.core.common.Page;
import com.basis.core.common.Result;
import com.basis.core.domain.Employee;

/**
*Generated by StarUML(tm) Java Add-In
*  @ Project : basis
*  @ File Name : BaseAction.java
*  @ Date : 2012/7/17
*  @ Author : wxliu
*/
public class BaseAction extends ActionSupport implements ServletRequestAware{
	
	protected String namespace = "";
	protected HttpServletRequest request; 
	protected HttpServletResponse response; 
	protected Page page=new Page();
	protected Result result=new Result<Object>(true);
	protected List list=new ArrayList();
	protected Map<String,Object> parentMap = new HashMap<String,Object>();

	/**
	 * Get an object from the WebWork user session
	 * @param name
	 * @return java.lang.Object
	 * @roseuid 431F92DB00BD
	 */
	protected Object get(String name) {	
		return ActionContext.getContext().getSession().get(name);
		
	}

	/**
	 * Put an object in the WebWork user session
	 * @param name
	 * @param value
	 * @roseuid 431F92DB00D1
	 */
	protected void set(String name, Object value) {
		ActionContext.getContext().getSession().put(name, value);
	}
	
	protected void remove(String name){
		ActionContext.getContext().getSession().remove(name);
	}
	
	public String getActionName(){
		return this.getClass().getName()+"_";
	}
	
	public String getActionNames(){
		return ActionContext.getContext().getActionInvocation().getProxy().getActionName();
	}

	public String getNamespace() {
		return ActionContext.getContext().getActionInvocation().getProxy().getNamespace();
	}
	
	public String getServerLocation() {
		return "HTTP://" + request.getServerName() + ":" + String.valueOf(request.getServerPort());
	}
	
	public String getContextPath(){
		return request.getContextPath();
	}

	public String getHttpPath(){
		return "http:"+"//"+
			getServletRequest().getServerName()+":"+getServletRequest().getServerPort()+
			getServletRequest().getContextPath();
	}

	public void setServletResponse(HttpServletResponse response) {
		this.response=response;
	}
	
	public HttpServletResponse getServletResponse(){
		return ServletActionContext.getResponse();
	}
	public void setServletRequest(HttpServletRequest request) {
		this.request=request;
	}
	
	public HttpServletRequest getServletRequest(){
		return request;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public Result getResult() {
		//设置国际化消息
		if(result!=null){
			result.setMessage(getText(result.getCode()));
		}
		return result;
	}
	
	public Employee getUser(){
		Object employee=get(Employee.USER_SESSION_KEY);
		return employee==null?null:(Employee)employee;
	}

	public List getList() {
		return list;
	}

	public void setResult(Result result) {
		this.result = result;
	}
	/**
	 * Excel下载
	 * @param filePath 文件所在路径
	 * @param fileName 下载文件名
	 * @throws IOException
	 */
	protected void writeExcel(String filePath, String fileName) throws IOException {
		HttpServletResponse response = ServletActionContext.getResponse();
		try{
			response.setContentType(getExtType(".xls")+";charset=UTF-8");
			response.setCharacterEncoding("UTF-8");
			fileName = new String(fileName.getBytes("UTF-8"),"ISO8859-1");
			response.setHeader("Content-Disposition", 
					"attachment;filename=\""+fileName+".xls\"");
			BufferedInputStream br=new BufferedInputStream(new FileInputStream(filePath));  
			int len=0;  
			byte[] buff = new byte[1024*4];  
			OutputStream outs=response.getOutputStream();  
			while((len=br.read(buff))>0){  
				outs.write(buff,0,len);  
			}  
			outs.close();  
			br.close();
		}catch (Exception e) {
			response.getWriter().print("导出发生错误，请联系系统管理员。");
		}
	}
	private static final Map<String, String> extTypeMap = new HashMap<String, String>();
	public String getExtType(String ext) {
		String type = extTypeMap.get(ext);
		if (null != type) {
			return type;
		}
		return extTypeMap.get(".*");
	}
	
	protected void download(String path, HttpServletResponse response) throws FileNotFoundException, IOException {
		OutputStream toClient = null;
		InputStream bis = null;
		FileInputStream fis = null;
		// path是指欲下载的文件的路径。
		File file = new File(path);
		//判断当前文件是否存在,若是不存在则跑出异常
		if(!file.exists()) {
			throw new FileNotFoundException("下载失败,该文件不存在,可能已经被删除");
		}
		// 取得文件名。
		String filename = file.getName();
		// 以流的形式下载文件。
		fis = new FileInputStream(path);
		bis = new BufferedInputStream(fis);
		byte[] buffer = new byte[bis.available()];
		fis.read(buffer);
		fis.close();
		bis.close();
		// 清空response
		response.reset();
		// 设置response的Header
		response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes()));
		response.addHeader("Content-Length", "" + file.length());
		toClient = new BufferedOutputStream(response.getOutputStream());
		response.setContentType("application/octet-stream");
		toClient.flush();
		toClient.write(buffer);
		toClient.close();
		
		
	}

	public Map<String, Object> getParentMap() {
		return parentMap;
	}

	public void setParentMap(Map<String, Object> parentMap) {
		this.parentMap = parentMap;
	}
}
