/**
*Generated by StarUML(tm) Java Add-In
*  @ Project : basis
*  @ File Name : Roletemplate.java
*  @ Date : 2012/9/21
*  @ Author : wxliu
*/


package com.basis.web.action;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.struts2.json.JSONException;
import org.apache.struts2.json.JSONUtil;
import com.basis.core.common.Result;
import com.basis.core.condition.MenuCondition;
import com.basis.core.condition.RoletemplateCondition;
import com.basis.core.constants.EMessageCode;
import com.basis.core.constants.EOperator;
import com.basis.core.domain.Roletemplate;
import com.basis.core.domain.RoletemplateMenu;
import com.basis.core.service.IMenuService;
import com.basis.core.service.IRoletemplateService;
import com.basis.web.common.Authority;
import com.basis.web.common.BaseAction;

/**
 * 权限模版Action
 * @author wxliu
 *
 */
public class RoletemplateAction extends BaseAction{
	private IRoletemplateService roletemplateService;
	private IMenuService menuService;
	private RoletemplateCondition condition;
	private Roletemplate roletemplate;
	private List<RoletemplateMenu> roletemplateMenuList;
	private String initmenusJson;//roletemplate（模版） 下的菜单---JSON格式 {menuid1:{RoleMenu1},menuid2:{RoleMenu2}...}
	private String menusJson;//菜单列表json格式 [{menu1},{menu2}...]
	
	/**
	 * 入口
	 * @return
	 */
	@Authority(operator=EOperator.SELECT)
	public String index() {
		return "roletemplate-index";
	}
	/**
	 * 列表
	 * @return
	 */
	@Authority(operator=EOperator.SELECT)
	public String data() {
		page=roletemplateService.queryRoletemplatePage(condition);
		return "json-page";
	}
	/**
	 * 删除
	 * @return
	 */
	@Authority(operator=EOperator.DELETE)
	public String delete() {
		try{
			roletemplate.setModifyerId(getUser().getId());
			result=roletemplateService.removeRoletemplate(roletemplate);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 跳转到编辑页面
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String toEdit() {
		try {
			roletemplate=roletemplateService.queryRoletemplateById(roletemplate.getId());
			Set<RoletemplateMenu> rmSet=roletemplate.getRoletemplateMenuSet();
			Map<String,RoletemplateMenu> map=new HashMap();
			//封装用户组下的菜单列表
			if(rmSet!=null){
				Iterator<RoletemplateMenu> it=rmSet.iterator();
				while(it.hasNext()){
					RoletemplateMenu rm=it.next();
					map.put(rm.getMenuId(), rm);
				}
			}
			initmenusJson=JSONUtil.serialize(map);
			//封装菜单列表
			List menusList=menuService.queryMenuList(new MenuCondition());
			menusJson=JSONUtil.serialize(menusList).toString();
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return "roletemplate-edit";
	}
	/**
	 * 修改信息保存到数据库中
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String edit() {
		try{
			roletemplate.setModifyerId(getUser().getId());
			if(roletemplateMenuList!=null&&!roletemplateMenuList.isEmpty()){
				Set<RoletemplateMenu> roletemplateMenuSet=new HashSet<RoletemplateMenu>();
				for(RoletemplateMenu rm:roletemplateMenuList){
					if(rm!=null){
						roletemplateMenuSet.add(rm);
					}
				}
				roletemplate.setRoletemplateMenuSet(roletemplateMenuSet);
			}
			result=roletemplateService.modifyRoletemplate(roletemplate);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 跳转到新增页面
	 * @return
	 */
	@Authority(operator=EOperator.ADD)
	public String toAdd() {
		//封装菜单列表
		List menusList=menuService.queryMenuList(new MenuCondition());
		try {
			menusJson=JSONUtil.serialize(menusList).toString();
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return "roletemplate-add";
	}
	/**
	 * 新增
	 * @return
	 */
	@Authority(operator=EOperator.ADD)
	public String add() {
		try{
			roletemplate.setCreaterId(getUser().getId());
			if(roletemplateMenuList!=null&&!roletemplateMenuList.isEmpty()){
				Set<RoletemplateMenu> roletemplateMenuSet=new HashSet<RoletemplateMenu>();
				for(RoletemplateMenu rm:roletemplateMenuList){
					if(rm!=null){
						roletemplateMenuSet.add(rm);
					}
				}
				roletemplate.setRoletemplateMenuSet(roletemplateMenuSet);
			}
			result=roletemplateService.addRoletemplate(roletemplate);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 查看
	 * @return
	 */
	@Authority(operator=EOperator.SELECT)
	public String detail() {
		return this.toEdit();
	}

	public RoletemplateCondition getCondition() {
		return condition;
	}

	public void setCondition(RoletemplateCondition condition) {
		this.condition = condition;
	}

	public void setRoletemplateService(IRoletemplateService roletemplateService) {
		this.roletemplateService = roletemplateService;
	}
	public Roletemplate getRoletemplate() {
		return roletemplate;
	}
	public void setRoletemplate(Roletemplate roletemplate) {
		this.roletemplate = roletemplate;
	}
	public List<RoletemplateMenu> getRoletemplateMenuList() {
		return roletemplateMenuList;
	}
	public void setRoletemplateMenuList(List<RoletemplateMenu> roletemplateMenuList) {
		this.roletemplateMenuList = roletemplateMenuList;
	}
	public String getInitmenusJson() {
		return initmenusJson;
	}
	public void setInitmenusJson(String initmenusJson) {
		this.initmenusJson = initmenusJson;
	}
	public String getMenusJson() {
		return menusJson;
	}
	public void setMenusJson(String menusJson) {
		this.menusJson = menusJson;
	}
	public void setMenuService(IMenuService menuService) {
		this.menuService = menuService;
	}
	
}
