/**
*Generated by StarUML(tm) Java Add-In
*  @ Project : jzh
*  @ File Name : EmployeeAction.java
*  @ Date : 2012/9/21
*  @ Author : sunchuanbao
*/
package com.basis.web.action;

import java.util.List;

import com.basis.core.common.Result;
import com.basis.core.condition.EmployeeCondition;
import com.basis.core.condition.RoleCondition;
import com.basis.core.constants.EMessageCode;
import com.basis.core.constants.EOperator;
import com.basis.core.domain.Employee;
import com.basis.core.domain.Role;
import com.basis.core.service.IEmployeeService;
import com.basis.core.service.IRoleService;
import com.basis.web.common.Authority;
import com.basis.web.common.BaseAction;

/**
 * 员工Action
 * @author sunchuanbao
 *
 */
public class EmployeeAction extends BaseAction{
	private IEmployeeService employeeService;
	private IRoleService roleService;
	private EmployeeCondition condition;
	private Employee employee;
	private List<Role> roleList;
	
	private String nowPassword;
	private String initPassword=Employee.INITPASSWORD;
	/**
	 * 入口
	 * @return
	 */
	@Authority(operator=EOperator.SELECT)
	public String index() {
		roleList=roleService.queryRoleList(new RoleCondition());
		return "employee-index";
	}
	/**
	 * 列表
	 * @return
	 */
	@Authority(operator=EOperator.SELECT)
	public String data() {
		try{
			condition.setIncludeAdmin(false);//不包含管理员
			page=employeeService.queryEmployeePage(condition);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return "json-page";
	}
	/**
	 * 跳转到新增页面
	 * @return
	 */
	@Authority(operator=EOperator.ADD)
	public String toAdd() {
		try{
			roleList=roleService.queryRoleList(new RoleCondition());
		}catch (Exception e) {
			e.printStackTrace();
		}
		return "employee-add";
	}
	/**
	 * 新增员工
	 * @return
	 */
	@Authority(operator=EOperator.ADD)
	public String add() {
		try{
			employee.setCreaterId(getUser().getId());
			result=employeeService.addEmployee(employee);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 跳转到编辑页面
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String toEdit() {
		try{
			employee=employeeService.queryEmployeeById(employee.getId());
			roleList=roleService.queryRoleList(new RoleCondition());
		}catch (Exception e) {
			e.printStackTrace();
		}
		return "employee-edit";
	}
	/**
	 * 更新修改到数据库
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String edit() {
		try{
			employee.setModifyerId(getUser().getId());
			result=employeeService.modifyEmployee(employee);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 删除
	 * @return
	 */
	@Authority(operator=EOperator.DELETE)
	public String delete() {
		try{
			employee.setModifyerId(getUser().getId());
			result=employeeService.removeEmployee(employee);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 初始化密码
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String initPassword() {
		try{
			employee.setModifyerId(getUser().getId());
			result=employeeService.modifyInitPassword(employee);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 修改密码
	 * @return
	 */
	public String toResetPassword() {
		employee=employeeService.queryEmployeeById(employee.getId());
		return "employee-reset-password";
	}
	/**
	 * 修改密码到数据库中
	 * @return
	 */
	public String resetPassword() {
		try{
			employee.setModifyerId(getUser().getId());
			result=employeeService.modifyResetPassword(employee,nowPassword);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 冻结
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String lock() {
		try{
			employee.setModifyerId(getUser().getId());
			result=employeeService.modifyLockEmployee(employee);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}
	/**
	 * 开启
	 * @return
	 */
	@Authority(operator=EOperator.MODIFY)
	public String unlock() {
		try{
			employee.setModifyerId(getUser().getId());
			result=employeeService.modifyUnlockEmployee(employee);
		}catch (Exception e) {
			e.printStackTrace();
			result=new Result<Object>(false,EMessageCode.EXCEPTION.getCode());
		}
		return "json-result";
	}

	public EmployeeCondition getCondition() {
		return condition;
	}

	public void setCondition(EmployeeCondition condition) {
		this.condition = condition;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public List<Role> getRoleList() {
		return roleList;
	}

	public void setRoleList(List<Role> roleList) {
		this.roleList = roleList;
	}

	public void setEmployeeService(IEmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	public void setRoleService(IRoleService roleService) {
		this.roleService = roleService;
	}
	public String getInitPassword() {
		return initPassword;
	}
	public void setInitPassword(String initPassword) {
		this.initPassword = initPassword;
	}
	public String getNowPassword() {
		return nowPassword;
	}
	public void setNowPassword(String nowPassword) {
		this.nowPassword = nowPassword;
	}
	
}
